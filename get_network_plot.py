# -*- coding: utf-8 -*-
"""get_network_plot.ipynb

Automatically generated by Colab.
"""

import pandas as pd
import re
import networkx as nx
import matplotlib.pyplot as plt

def generate_network_plot(input_file_path, output_image_path, threshold_size=5):
    """
    Generates a network plot of research interest areas from an Excel file and saves the plot as an image.

    Parameters:
    input_file_path (str): Path to the input Excel file.
    output_image_path (str): Path to save the output image.
    threshold_size (int): Threshold to remove small components. Default is 5.
    """

    # Read the input Excel file
    df = pd.read_excel(input_file_path)

    # Create a network graph
    G = nx.Graph()

    # Add nodes and edges to the graph
    for idx, row in df.iterrows():
        researcher = row['name']
        interest_areas = re.split(r',\s*|\sy\s*|\.\s*', row['interests'])
        for i in range(len(interest_areas)):
            for j in range(i + 1, len(interest_areas)):
                G.add_node(interest_areas[i], type='area')
                G.add_node(interest_areas[j], type='area')
                G.add_edge(interest_areas[i], interest_areas[j])

    # Find connected components and their sizes
    connected_components = list(nx.connected_components(G))
    component_sizes = [len(component) for component in connected_components]

    # Identify and remove small components
    components_to_remove = [component for component in connected_components if len(component) < threshold_size]
    for component in components_to_remove:
        G.remove_nodes_from(component)

    # Calculate node sizes and label sizes based on degree (number of edges)
    node_sizes = [G.degree(node) * 100 for node in G.nodes()]
    max_font_size = 25
    label_font_sizes = {node: min(G.degree(node) * 4, max_font_size) for node in G.nodes()}

    # Draw the updated network graph
    pos = nx.spring_layout(G)
    areas = [node for node, data in G.nodes(data=True) if data['type'] == 'area']

    plt.figure(figsize=(25, 20))
    nx.draw_networkx_nodes(G, pos, nodelist=areas, node_color='lightgreen', node_size=node_sizes, label='Interest Areas')
    nx.draw_networkx_edges(G, pos, edge_color='gray')

    # Draw labels with proportional sizes
    for node, (x, y) in pos.items():
        plt.text(x, y, node, fontsize=label_font_sizes[node], ha='center', va='center')

    plt.legend(scatterpoints=1)
    plt.title('Interest Areas Network Plot', fontsize=20)

    # Save the image
    plt.savefig(output_image_path, format='png')
    plt.show()
    print(f'Network plot saved to {output_image_path}')

# Example usage
if __name__ == "__main__":
    input_file_path = 'path/to/your/input_file.xlsx'
    output_image_path = 'path/to/save/cnetplot_interest_areas.png'

    generate_network_plot(input_file_path, output_image_path, threshold_size=5)
